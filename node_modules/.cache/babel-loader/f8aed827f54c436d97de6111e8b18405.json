{"ast":null,"code":"import * as React from 'react';\nimport { getter } from '@progress/kendo-react-common';\nconst emailRegex = new RegExp(/\\S+@\\S+\\.\\S+/);\nconst phoneRegex = new RegExp(/^(?:\\+?(61))? ?(?:\\((?=.*\\)))?(0?[2-57-8])\\)? ?(\\d\\d(?:[- ](?=\\d{3})|(?!\\d\\d[- ]?\\d[- ]))\\d\\d[- ]?\\d[- ]?\\d{3})$/);\nconst stRegex = new RegExp(/^[0-9\\b]+$/);\nexport const emailValidator = value => !value ? \"Email field is required.\" : emailRegex.test(value) ? \"\" : \"Email is not in a valid format.\";\nexport const stValidator = value => !value ? \"Street number is required\" : stRegex.test(value) ? \"\" : \"Street number should be a number.\";\nexport const userNameValidator = value => !value ? \"User Name is required\" : value.length < 5 ? \"User name should be at least 5 characters long.\" : \"\";\nexport const phoneValidator = value => !value ? \"Phone number is required.\" : phoneRegex.test(value) ? \"\" : \"Not a valid phone number.\";\nexport const requiredValidator = value => value ? \"\" : \"Error: This field is required.\";\nexport const addressValidator = value => value ? \"\" : \"Address is required.\";\nconst userNameGetter = getter('username');\nconst emailGetter = getter('email');\nexport const formValidator = values => {\n  const userName = userNameGetter(values);\n  const emailValue = emailGetter(values);\n\n  if (userName && emailValue && emailRegex.test(emailValue)) {\n    return {};\n  }\n\n  return {\n    VALIDATION_SUMMARY: 'Please fill in the following fields.',\n    ['username']: !userName ? 'User Name is required.' : '',\n    ['email']: emailValue && emailRegex.test(emailValue) ? '' : 'Email is required and should be in a valid format.'\n  };\n};","map":{"version":3,"sources":["/Users/imac/Downloads/xklysv--run/src/app/validators.jsx"],"names":["React","getter","emailRegex","RegExp","phoneRegex","stRegex","emailValidator","value","test","stValidator","userNameValidator","length","phoneValidator","requiredValidator","addressValidator","userNameGetter","emailGetter","formValidator","values","userName","emailValue","VALIDATION_SUMMARY"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,MAAT,QAAuB,8BAAvB;AAEA,MAAMC,UAAU,GAAG,IAAIC,MAAJ,CAAW,cAAX,CAAnB;AACA,MAAMC,UAAU,GAAG,IAAID,MAAJ,CAAW,kHAAX,CAAnB;AACA,MAAME,OAAO,GAAG,IAAIF,MAAJ,CAAW,YAAX,CAAhB;AAEA,OAAO,MAAMG,cAAc,GAAIC,KAAD,IAAW,CAACA,KAAD,GACrC,0BADqC,GAEpCL,UAAU,CAACM,IAAX,CAAgBD,KAAhB,IAAyB,EAAzB,GAA8B,iCAF5B;AAGP,OAAO,MAAME,WAAW,GAAIF,KAAD,IAAW,CAACA,KAAD,GAClC,2BADkC,GAElCF,OAAO,CAACG,IAAR,CAAaD,KAAb,IAAsB,EAAtB,GAA2B,mCAFxB;AAGP,OAAO,MAAMG,iBAAiB,GAAIH,KAAD,IAAW,CAACA,KAAD,GACxC,uBADwC,GAExCA,KAAK,CAACI,MAAN,GAAe,CAAf,GAAmB,iDAAnB,GAAuE,EAFpE;AAGP,OAAO,MAAMC,cAAc,GAAIL,KAAD,IAAW,CAACA,KAAD,GACrC,2BADqC,GAErCH,UAAU,CAACI,IAAX,CAAgBD,KAAhB,IAAyB,EAAzB,GAA8B,2BAF3B;AAIP,OAAO,MAAMM,iBAAiB,GAAIN,KAAD,IAAWA,KAAK,GAAG,EAAH,GAAQ,gCAAlD;AACP,OAAO,MAAMO,gBAAgB,GAAIP,KAAD,IAAWA,KAAK,GAAG,EAAH,GAAQ,sBAAjD;AAEP,MAAMQ,cAAc,GAAGd,MAAM,CAAC,UAAD,CAA7B;AACA,MAAMe,WAAW,GAAGf,MAAM,CAAC,OAAD,CAA1B;AAEA,OAAO,MAAMgB,aAAa,GAAIC,MAAD,IAAY;AACrC,QAAMC,QAAQ,GAAGJ,cAAc,CAACG,MAAD,CAA/B;AACA,QAAME,UAAU,GAAGJ,WAAW,CAACE,MAAD,CAA9B;;AAEA,MAAIC,QAAQ,IAAIC,UAAZ,IAA0BlB,UAAU,CAACM,IAAX,CAAgBY,UAAhB,CAA9B,EAA2D;AACvD,WAAO,EAAP;AACH;;AAED,SAAO;AACHC,IAAAA,kBAAkB,EAAE,sCADjB;AAEH,KAAC,UAAD,GAAc,CAACF,QAAD,GAAY,wBAAZ,GAAuC,EAFlD;AAGH,KAAC,OAAD,GAAWC,UAAU,IAAIlB,UAAU,CAACM,IAAX,CAAgBY,UAAhB,CAAd,GAA4C,EAA5C,GAAiD;AAHzD,GAAP;AAKH,CAbM","sourcesContent":["import * as React from 'react';\r\nimport { getter } from '@progress/kendo-react-common';\r\n\r\nconst emailRegex = new RegExp(/\\S+@\\S+\\.\\S+/);\r\nconst phoneRegex = new RegExp(/^(?:\\+?(61))? ?(?:\\((?=.*\\)))?(0?[2-57-8])\\)? ?(\\d\\d(?:[- ](?=\\d{3})|(?!\\d\\d[- ]?\\d[- ]))\\d\\d[- ]?\\d[- ]?\\d{3})$/); \r\nconst stRegex = new RegExp(/^[0-9\\b]+$/);\r\n\r\nexport const emailValidator = (value) => !value ?\r\n    \"Email field is required.\" :\r\n    (emailRegex.test(value) ? \"\" : \"Email is not in a valid format.\");\r\nexport const stValidator = (value) => !value ?\r\n    \"Street number is required\" :\r\n    stRegex.test(value) ? \"\" : \"Street number should be a number.\";\r\nexport const userNameValidator = (value) => !value ?\r\n    \"User Name is required\" :\r\n    value.length < 5 ? \"User name should be at least 5 characters long.\" : \"\";\r\nexport const phoneValidator = (value) => !value ?\r\n    \"Phone number is required.\" :\r\n    phoneRegex.test(value) ? \"\" : \"Not a valid phone number.\";\r\n\r\nexport const requiredValidator = (value) => value ? \"\" : \"Error: This field is required.\";\r\nexport const addressValidator = (value) => value ? \"\" : \"Address is required.\";\r\n\r\nconst userNameGetter = getter('username');\r\nconst emailGetter = getter('email');\r\n\r\nexport const formValidator = (values) => {\r\n    const userName = userNameGetter(values);\r\n    const emailValue = emailGetter(values);\r\n\r\n    if (userName && emailValue && emailRegex.test(emailValue)) {\r\n        return {};\r\n    }\r\n\r\n    return {\r\n        VALIDATION_SUMMARY: 'Please fill in the following fields.',\r\n        ['username']: !userName ? 'User Name is required.' : '',\r\n        ['email']: emailValue && emailRegex.test(emailValue) ? '' : 'Email is required and should be in a valid format.'\r\n    };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}